#!/usr/bin/env node

'use strict';

const chalk = require('chalk');
const argv = require('optimist').argv;

const meta = require('../package.json');
const PguMosCrawler = require('../lib/pgumos-crawler');
const responseParse = require('../lib/helpers/pgumos-crawler-response-parser');
const responseFormat = require('../lib/helpers/crawler-response-cli-format');

console.log(chalk.bold(`${meta.name} v.${meta.version} |`));
console.log(chalk.bold(`${getCliDelimiter()}|`));

// -- print help info --------------
if (argv.help || argv.h) {
    printHelpInfo();
    process.exit(0);
}

const verbose = Number(process.env.KLB_PGU_VERBOSE) === 1;
const pguLogin = process.env.KLB_PGU_MOS_LOGIN || null;

// -- credentials ------------------
if (!pguLogin) {
    console.log(chalk.red('env KLB_PGU_MOS_LOGIN is required'));
    return;
}

const pguSecret = process.env.KLB_PGU_MOS_SECRET || null;

if (!pguSecret) {
    console.log(chalk.red('env KLB_PGU_MOS_SECRET is required'));
    return;
}

// -- data of child ---------------
const childFirstName = process.env.KLB_CHILD_FIRSTNAME || null;

if (!childFirstName) {
    console.log(chalk.red('env KLB_CHILD_FIRSTNAME is required'));
    return;
}

const childMiddleName = process.env.KLB_CHILD_SECONDNAME || null;

if (!childMiddleName) {
    console.log(chalk.red('env KLB_CHILD_SECONDNAME is required'));
    return;
}

const childLastName = process.env.KLB_CHILD_LASTNAME || null;

if (!childLastName) {
    console.log(chalk.red('env KLB_CHILD_LASTNAME is required'));
    return;
}

const childGender = process.env.KLB_CHILD_GENDER || null;

if (!childGender) {
    console.log(chalk.red('env KLB_CHILD_GENDER is required'));
    return;
}

const childBirthDate = process.env.KLB_CHILD_BIRTHDATE || null;

if (!childBirthDate) {
    console.log(chalk.red('env KLB_CHILD_BIRTHDATE is required'));
    return;
}

const childDocSer = process.env.KLB_CHILD_DOC_SER || null;

if (!childDocSer) {
    console.log(chalk.red('env KLB_CHILD_DOC_SER is required'));
    return;
}

const childDocNumber = process.env.KLB_CHILD_DOC_NUMBER || null;

if (!childDocNumber) {
    console.log(chalk.red('env KLB_CHILD_DOC_NUMBER is required'));
    return;
}

const childDocDate = process.env.KLB_CHILD_DOC_DATE || null;

if (!childDocDate) {
    console.log(chalk.red('env KLB_CHILD_DOC_DATE is required'));
    return;
}

const childDocPlace = process.env.KLB_CHILD_DOC_PLACE || null;

if (!childDocPlace) {
    console.log(chalk.red('env KLB_CHILD_DOC_PLACE is required'));
    return;
}

// -- crawler init ------------------
console.log(chalk.yellow('pgu crawler started'));

const crawlerOptions = {
    childFirstName,
    childMiddleName,
    childLastName,
    childGender,
    childBirthDate,
    childDocSer,
    childDocNumber,
    childDocDate,
    childDocPlace,
    verbose,
    headless: true,
};

if (argv.screenshot || argv.s) {
    crawlerOptions.screenshot = `${process.cwd()}/tmp/page.png`;
}

if (argv['headless-off']) {
    crawlerOptions.headless = false;
}

const crawler = new PguMosCrawler(pguLogin, pguSecret, crawlerOptions);

if (argv.verbose || argv.v) {
    crawler.on('task', message => console.log(chalk.gray(` - ${message}`)));
    crawlerOptions.verbose = true;
}

// -- crawling ---------------------
crawler.getKindergartenInfo()
    .then(responseParse)
    .then(responseParsed => responseParsed.organizations)
    .then(responseFormat)
    .then(message => {
        console.log(chalk.green('pgu crawler response:'));
        console.log();
        console.log(message);
    })
    .catch(error => {
        console.log(chalk.red(`pgu crawler received error: ${error.message}`));
        process.exit(1);
    }).then(() => {
        console.log(chalk.bold(getCliDelimiter()));
        console.log(chalk.bold('done'));
    });

/**
 * Возвращает строку-разделитель для вывода в поток вывода
 * @returns {string}
 */
function getCliDelimiter() {
    return '-'.repeat(38);
}

function printHelpInfo() {
    console.log(chalk.gray(`
    --verbose      | -v  : verbose mod
    --screenshot   | -s  : take screenshot
    --headless-off       : headless mod off
    `));
}
